//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\lsystem.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class lsystemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, FLOAT=33, VARIABLE=34, RULENAME=35, WS=36;
	public const int
		RULE_lSystem = 0, RULE_assignement = 1, RULE_productionRule = 2, RULE_module = 3, 
		RULE_moduleLoop = 4, RULE_expression = 5, RULE_range = 6, RULE_simpleExpression = 7, 
		RULE_simpleRange = 8;
	public static readonly string[] ruleNames = {
		"lSystem", "assignement", "productionRule", "module", "moduleLoop", "expression", 
		"range", "simpleExpression", "simpleRange"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "','", "')'", "'?'", "':'", "'['", "']'", "'!'", 
		"'~'", "'-'", "'*'", "'/'", "'%'", "'**'", "'+'", "'<<'", "'>>'", "'<='", 
		"'>='", "'<'", "'>'", "'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", 
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "FLOAT", "VARIABLE", 
		"RULENAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lsystem.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static lsystemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public lsystemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public lsystemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LSystemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lsystemParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignementContext[] assignement() {
			return GetRuleContexts<AssignementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignementContext assignement(int i) {
			return GetRuleContext<AssignementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProductionRuleContext[] productionRule() {
			return GetRuleContexts<ProductionRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProductionRuleContext productionRule(int i) {
			return GetRuleContext<ProductionRuleContext>(i);
		}
		public LSystemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lSystem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLSystem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LSystemContext lSystem() {
		LSystemContext _localctx = new LSystemContext(Context, State);
		EnterRule(_localctx, 0, RULE_lSystem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VARIABLE) {
				{
				{
				State = 18;
				assignement();
				State = 19;
				Match(T__0);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26;
				module();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__7 || _la==RULENAME );
			State = 31;
			Match(T__0);
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32;
				productionRule();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==RULENAME );
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(lsystemParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public AssignementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignementContext assignement() {
		AssignementContext _localctx = new AssignementContext(Context, State);
		EnterRule(_localctx, 2, RULE_assignement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(VARIABLE);
			State = 40;
			Match(T__1);
			State = 41;
			simpleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionRuleContext : ParserRuleContext {
		public ExpressionContext probability_;
		public ModuleContext _module;
		public IList<ModuleContext> _predecessors_ = new List<ModuleContext>();
		public ExpressionContext condition_;
		public IList<ModuleContext> _successors_ = new List<ModuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULENAME() { return GetToken(lsystemParser.RULENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(lsystemParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(lsystemParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		public ProductionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_productionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProductionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProductionRuleContext productionRule() {
		ProductionRuleContext _localctx = new ProductionRuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_productionRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(RULENAME);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 44;
				Match(T__2);
				State = 45;
				Match(VARIABLE);
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 46;
					Match(T__3);
					State = 47;
					Match(VARIABLE);
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 53;
				Match(T__4);
				}
			}

			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 56;
				Match(T__5);
				State = 57;
				_localctx.probability_ = expression(0);
				}
			}

			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 60;
				Match(T__6);
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7 || _la==RULENAME) {
					{
					{
					State = 61;
					_localctx._module = module();
					_localctx._predecessors_.Add(_localctx._module);
					}
					}
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 69;
				Match(T__6);
				State = 70;
				_localctx.condition_ = expression(0);
				}
				break;
			}
			State = 73;
			Match(T__6);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7 || _la==RULENAME) {
				{
				{
				State = 74;
				_localctx._module = module();
				_localctx._successors_.Add(_localctx._module);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULENAME() { return GetToken(lsystemParser.RULENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleLoopContext moduleLoop() {
			return GetRuleContext<ModuleLoopContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 6, RULE_module);
		int _la;
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				Match(RULENAME);
				State = 83;
				Match(T__2);
				State = 84;
				expression(0);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 85;
					Match(T__3);
					State = 86;
					expression(0);
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				Match(RULENAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95;
				moduleLoop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		public ModuleLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleLoopContext moduleLoop() {
		ModuleLoopContext _localctx = new ModuleLoopContext(Context, State);
		EnterRule(_localctx, 8, RULE_moduleLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__7);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 99;
				module();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__7 || _la==RULENAME );
			State = 104;
			Match(T__3);
			State = 105;
			expression(0);
			State = 106;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext left_;
		public IToken var_;
		public IToken float_;
		public RangeContext range_;
		public ExpressionContext expr_;
		public IToken unop_;
		public ExpressionContext right_;
		public IToken binop_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(lsystemParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(lsystemParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				{
				State = 109;
				_localctx.var_ = Match(VARIABLE);
				}
				break;
			case FLOAT:
				{
				State = 110;
				_localctx.float_ = Match(FLOAT);
				}
				break;
			case T__30:
				{
				State = 111;
				_localctx.range_ = range();
				}
				break;
			case T__2:
				{
				State = 112;
				Match(T__2);
				State = 113;
				_localctx.expr_ = expression(0);
				State = 114;
				Match(T__4);
				}
				break;
			case T__9:
			case T__10:
			case T__11:
				{
				State = 116;
				_localctx.unop_ = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
					_localctx.unop_ = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 117;
				_localctx.right_ = expression(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 141;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 120;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 121;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 122;
						_localctx.right_ = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 124;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__16) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 125;
						_localctx.right_ = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 127;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 128;
						_localctx.right_ = expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 130;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 131;
						_localctx.right_ = expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 133;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__24) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 134;
						_localctx.right_ = expression(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 136;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 137;
						_localctx.right_ = expression(3);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 139;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__28 || _la==T__29) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 140;
						_localctx.right_ = expression(2);
						}
						break;
					}
					} 
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ExpressionContext from_;
		public ExpressionContext to_;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 12, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__30);
			State = 147;
			_localctx.from_ = expression(0);
			State = 148;
			Match(T__3);
			State = 149;
			_localctx.to_ = expression(0);
			State = 150;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext left_;
		public IToken float_;
		public RangeContext range_;
		public SimpleExpressionContext expr_;
		public IToken unop_;
		public SimpleExpressionContext right_;
		public IToken binop_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(lsystemParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		return simpleExpression(0);
	}

	private SimpleExpressionContext simpleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, _parentState);
		SimpleExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_simpleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
				{
				State = 153;
				_localctx.float_ = Match(FLOAT);
				}
				break;
			case T__30:
				{
				State = 154;
				_localctx.range_ = range();
				}
				break;
			case T__2:
				{
				State = 155;
				Match(T__2);
				State = 156;
				_localctx.expr_ = simpleExpression(0);
				State = 157;
				Match(T__4);
				}
				break;
			case T__9:
			case T__10:
			case T__11:
				{
				State = 159;
				_localctx.unop_ = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
					_localctx.unop_ = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 160;
				_localctx.right_ = simpleExpression(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 186;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 184;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new SimpleExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 163;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 164;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 165;
						_localctx.right_ = simpleExpression(8);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 166;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 167;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__16) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 168;
						_localctx.right_ = simpleExpression(7);
						}
						break;
					case 3:
						{
						_localctx = new SimpleExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 169;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 170;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 171;
						_localctx.right_ = simpleExpression(6);
						}
						break;
					case 4:
						{
						_localctx = new SimpleExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 172;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 173;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 174;
						_localctx.right_ = simpleExpression(5);
						}
						break;
					case 5:
						{
						_localctx = new SimpleExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 175;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 176;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__24) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 177;
						_localctx.right_ = simpleExpression(4);
						}
						break;
					case 6:
						{
						_localctx = new SimpleExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 178;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 179;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 180;
						_localctx.right_ = simpleExpression(3);
						}
						break;
					case 7:
						{
						_localctx = new SimpleExpressionContext(_parentctx, _parentState);
						_localctx.left_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 181;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 182;
						_localctx.binop_ = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__28 || _la==T__29) ) {
							_localctx.binop_ = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 183;
						_localctx.right_ = simpleExpression(2);
						}
						break;
					}
					} 
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleRangeContext : ParserRuleContext {
		public SimpleExpressionContext from_;
		public SimpleExpressionContext to_;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		public SimpleRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlsystemVisitor<TResult> typedVisitor = visitor as IlsystemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleRangeContext simpleRange() {
		SimpleRangeContext _localctx = new SimpleRangeContext(Context, State);
		EnterRule(_localctx, 16, RULE_simpleRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__30);
			State = 190;
			_localctx.from_ = simpleExpression(0);
			State = 191;
			Match(T__3);
			State = 192;
			_localctx.to_ = simpleExpression(0);
			State = 193;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 7: return simpleExpression_sempred((SimpleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool simpleExpression_sempred(SimpleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xC6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x18', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x1B', '\v', '\x2', '\x3', '\x2', '\x6', '\x2', '\x1E', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\x1F', '\x3', '\x2', '\x3', '\x2', 
		'\x6', '\x2', '$', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '%', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', '\x33', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x36', 
		'\v', '\x4', '\x3', '\x4', '\x5', '\x4', '\x39', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '=', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\x41', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x44', '\v', 
		'\x4', '\x5', '\x4', '\x46', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'J', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'N', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'Q', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', 'Z', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', ']', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x63', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x6', '\x6', 'g', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'h', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'y', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x90', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x93', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA4', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xBB', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\xBE', '\v', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x2', '\x4', '\f', '\x10', '\v', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x2', '\n', '\x3', '\x2', '\f', '\xE', '\x3', 
		'\x2', '\xF', '\x12', '\x4', '\x2', '\xE', '\xE', '\x13', '\x13', '\x3', 
		'\x2', '\x14', '\x15', '\x3', '\x2', '\x16', '\x19', '\x3', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x1F', ' ', '\x2', 
		'\xDF', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '-', '\x3', '\x2', '\x2', '\x2', '\b', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'x', '\x3', '\x2', '\x2', '\x2', '\xE', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x12', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\x5', '\x4', '\x3', '\x2', '\x15', 
		'\x16', '\a', '\x3', '\x2', '\x2', '\x16', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x14', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', 
		'\b', '\x5', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', 
		'\x2', '\x2', '!', '#', '\a', '\x3', '\x2', '\x2', '\"', '$', '\x5', '\x6', 
		'\x4', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\a', '\x2', '\x2', '\x3', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\a', '$', '\x2', '\x2', '*', '+', '\a', '\x4', '\x2', '\x2', '+', 
		',', '\x5', '\x10', '\t', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'-', '\x38', '\a', '%', '\x2', '\x2', '.', '/', '\a', '\x5', '\x2', '\x2', 
		'/', '\x34', '\a', '$', '\x2', '\x2', '\x30', '\x31', '\a', '\x6', '\x2', 
		'\x2', '\x31', '\x33', '\a', '$', '\x2', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x39', '\a', '\a', '\x2', '\x2', '\x38', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\b', 
		'\x2', '\x2', ';', '=', '\x5', '\f', '\a', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x42', '\a', '\t', '\x2', '\x2', '?', '\x41', 
		'\x5', '\b', '\x5', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'>', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\t', 
		'\x2', '\x2', 'H', 'J', '\x5', '\f', '\a', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'O', '\a', '\t', '\x2', '\x2', 'L', 'N', '\x5', '\b', 
		'\x5', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', '\x3', '\x2', '\x2', 'S', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\a', '%', '\x2', '\x2', 'U', 'V', '\a', '\x5', 
		'\x2', '\x2', 'V', '[', '\x5', '\f', '\a', '\x2', 'W', 'X', '\a', '\x6', 
		'\x2', '\x2', 'X', 'Z', '\x5', '\f', '\a', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', 
		'\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 
		'\a', '\x2', '\x2', '_', '\x63', '\x3', '\x2', '\x2', '\x2', '`', '\x63', 
		'\a', '%', '\x2', '\x2', '\x61', '\x63', '\x5', '\n', '\x6', '\x2', '\x62', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x66', '\a', '\n', '\x2', '\x2', '\x65', 'g', '\x5', 
		'\b', '\x5', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\x6', '\x2', '\x2', 'k', 'l', '\x5', '\f', '\a', '\x2', 
		'l', 'm', '\a', '\v', '\x2', '\x2', 'm', '\v', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\b', '\a', '\x1', '\x2', 'o', 'y', '\a', '$', '\x2', '\x2', 
		'p', 'y', '\a', '#', '\x2', '\x2', 'q', 'y', '\x5', '\xE', '\b', '\x2', 
		'r', 's', '\a', '\x5', '\x2', '\x2', 's', 't', '\x5', '\f', '\a', '\x2', 
		't', 'u', '\a', '\a', '\x2', '\x2', 'u', 'y', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\t', '\x2', '\x2', '\x2', 'w', 'y', '\x5', '\f', '\a', '\n', 
		'x', 'n', '\x3', '\x2', '\x2', '\x2', 'x', 'p', '\x3', '\x2', '\x2', '\x2', 
		'x', 'q', '\x3', '\x2', '\x2', '\x2', 'x', 'r', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', '\x91', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\f', '\t', '\x2', '\x2', '{', '|', '\t', '\x3', '\x2', 
		'\x2', '|', '\x90', '\x5', '\f', '\a', '\n', '}', '~', '\f', '\b', '\x2', 
		'\x2', '~', '\x7F', '\t', '\x4', '\x2', '\x2', '\x7F', '\x90', '\x5', 
		'\f', '\a', '\t', '\x80', '\x81', '\f', '\a', '\x2', '\x2', '\x81', '\x82', 
		'\t', '\x5', '\x2', '\x2', '\x82', '\x90', '\x5', '\f', '\a', '\b', '\x83', 
		'\x84', '\f', '\x6', '\x2', '\x2', '\x84', '\x85', '\t', '\x6', '\x2', 
		'\x2', '\x85', '\x90', '\x5', '\f', '\a', '\a', '\x86', '\x87', '\f', 
		'\x5', '\x2', '\x2', '\x87', '\x88', '\t', '\a', '\x2', '\x2', '\x88', 
		'\x90', '\x5', '\f', '\a', '\x6', '\x89', '\x8A', '\f', '\x4', '\x2', 
		'\x2', '\x8A', '\x8B', '\t', '\b', '\x2', '\x2', '\x8B', '\x90', '\x5', 
		'\f', '\a', '\x5', '\x8C', '\x8D', '\f', '\x3', '\x2', '\x2', '\x8D', 
		'\x8E', '\t', '\t', '\x2', '\x2', '\x8E', '\x90', '\x5', '\f', '\a', '\x4', 
		'\x8F', 'z', '\x3', '\x2', '\x2', '\x2', '\x8F', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\a', '!', '\x2', '\x2', '\x95', '\x96', '\x5', 
		'\f', '\a', '\x2', '\x96', '\x97', '\a', '\x6', '\x2', '\x2', '\x97', 
		'\x98', '\x5', '\f', '\a', '\x2', '\x98', '\x99', '\a', '\"', '\x2', '\x2', 
		'\x99', '\xF', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\b', '\t', 
		'\x1', '\x2', '\x9B', '\xA4', '\a', '#', '\x2', '\x2', '\x9C', '\xA4', 
		'\x5', '\xE', '\b', '\x2', '\x9D', '\x9E', '\a', '\x5', '\x2', '\x2', 
		'\x9E', '\x9F', '\x5', '\x10', '\t', '\x2', '\x9F', '\xA0', '\a', '\a', 
		'\x2', '\x2', '\xA0', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', 
		'\t', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x5', '\x10', '\t', '\n', 
		'\xA3', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA6', '\f', '\t', '\x2', '\x2', '\xA6', '\xA7', '\t', '\x3', 
		'\x2', '\x2', '\xA7', '\xBB', '\x5', '\x10', '\t', '\n', '\xA8', '\xA9', 
		'\f', '\b', '\x2', '\x2', '\xA9', '\xAA', '\t', '\x4', '\x2', '\x2', '\xAA', 
		'\xBB', '\x5', '\x10', '\t', '\t', '\xAB', '\xAC', '\f', '\a', '\x2', 
		'\x2', '\xAC', '\xAD', '\t', '\x5', '\x2', '\x2', '\xAD', '\xBB', '\x5', 
		'\x10', '\t', '\b', '\xAE', '\xAF', '\f', '\x6', '\x2', '\x2', '\xAF', 
		'\xB0', '\t', '\x6', '\x2', '\x2', '\xB0', '\xBB', '\x5', '\x10', '\t', 
		'\a', '\xB1', '\xB2', '\f', '\x5', '\x2', '\x2', '\xB2', '\xB3', '\t', 
		'\a', '\x2', '\x2', '\xB3', '\xBB', '\x5', '\x10', '\t', '\x6', '\xB4', 
		'\xB5', '\f', '\x4', '\x2', '\x2', '\xB5', '\xB6', '\t', '\b', '\x2', 
		'\x2', '\xB6', '\xBB', '\x5', '\x10', '\t', '\x5', '\xB7', '\xB8', '\f', 
		'\x3', '\x2', '\x2', '\xB8', '\xB9', '\t', '\t', '\x2', '\x2', '\xB9', 
		'\xBB', '\x5', '\x10', '\t', '\x4', '\xBA', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', 
		'!', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x10', '\t', '\x2', '\xC1', 
		'\xC2', '\a', '\x6', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\x10', '\t', 
		'\x2', '\xC3', '\xC4', '\a', '\"', '\x2', '\x2', '\xC4', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x19', '\x1F', '%', '\x34', '\x38', '<', 
		'\x42', '\x45', 'I', 'O', '[', '\x62', 'h', 'x', '\x8F', '\x91', '\xA3', 
		'\xBA', '\xBC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
